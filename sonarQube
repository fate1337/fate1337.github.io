SonarQube – это платформа для непрерывного статического анализа программного кода, где «из коробки» в бесплатной версии поддерживается 15 языков программирования. Платформа имеет довольно богатый API по расширению поддержки языков.Сам SonarQube написан на Java.
Скачать дистрибутив SonarQube можно на странице https://www.sonarqube.org/downloads/.



1. Настройка окружения сервера хранения результатов анализа SonarQube и разбор необходимых настроек
    SonarQube – это приложение, которое написано на Java, и для его запуска вам нужна Java.
    Необходимо установить JDK - Java Development Kit - этот пункт необходим

    Так же стоит зайти на сайт SonarQube авторизовавшись под администратором (Пароль:admin Логин: admin), но при этом сразу же необходимо изменить пароль учетной записи администратора. После чего можно приступить к настройке серверной части, на сайте SonarQube, например как: 
    Оплата за час работы программиста определенной платформы (SonarQube имеет возможность задолжности разработки), количество хранимого хэш-анализа, длительность этого хранения, количество и длительность хранение бэкапов, запрещение входа ананимов(Во вкладке Sequrity)
    После чего рекамендуеться создавать пользователей для данного анализа('КАК Я ПОНЯЛ ДЛЯ РАСПРЕДЕЛЕНИЯ РОЛЕЙ')
    Так же необходимо сгенерировать токен (ключ доступа) - этот пункт необходим

    Далее перейдем к настройке центрального сервера SonarQube в файле sonar.properties:
    1. Настройка соединения с БД:
        По умолчанию строка подключения к PostgreSQL выглядит так:
            sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube?currentSchema=my_schema
        Это значит, что:
            Мы используем провайдер postgresql;
            Сервер у нас крутится на localhost;
            СУБД, которая будет использоваться, называется sonarqube;
            CurrentSchema – схема баз данных.
        Вместо этого допишем данные авторизации:
            sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube?user=postgres&password=postgres

    2. Настройка пользователя и пароля к БД:
        sonar.jdbc.username=...
        sonar.jdbc.password=...
    3. Настройка выделения ресурса памяти для анализа/java машмны
    4. Далее он сказал, что ничего более менять не нужно.
    Информация с сайта:
        1. Основные настройки находятся в sonar.properties. Здесь можно настроить очень много разных параметров, но нам среди них нужно буквально шесть мест – в файле они все подписаны. Это параметры:
            1.1 User credentials:
                sonar.jdbc.usernamу
                sonar.jdbc.password
            1.2 Microsoft SQLServer:
                sonar.jdbc.url
            1.3 WEB SERVER:
                sonar.web.javaOpts
            1.4 COMPUTE ENGINE:
                sonar.ce.javaOpts
            1.5 ELASTICSEARCH:
                sonar.search.javaOpts
        2. Настройки выделения памяти
            Теперь надо еще явным образом прописать, сколько выделять памяти Java-машине. У нас всего таких три места:
                sonar.web.javaOpts – память на веб-интерфейс SonarQube,
                sonar.ce.javaOpts – память на фоновые задания, которые там крутятся.
                sonar.search.javaOpts – память на ElasticSearch, который используется для поиска в этой базе данных.
            Здесь нам нужно установить параметры Xmx и Xms – сколько мы готовы выделить оперативной памяти на сервере.
                Xms – это сколько он сразу выделяет.
                Xmx – сколько максимум.
    После того как вы отредактировали файл sonar.properties, можно запустить сам SonarQube.
        Для его запуска в каталоге bin у нас есть соответствующие папки. Заходим сюда:
            Здесь есть батник StartSonar, которым можно запустить SonarQube из командной строки;
            Можно поставить SonarQube как сервис, чтобы он крутился на сервере как служба:
            Файл InstallNTService.bat создает сервис SonarQube в списке сервисов;
            UninstallNTService.bat – удаляет;
            StartNTService.bat запускает сервис;
            А файл StopNTService.bat – останавливает.
    После того как мы запустим сервис, в службах служба появится SonarQube – вы можете уже им пользоваться.

2. Настройка окружения сканера замечаний и уязвимостей, особенности выделения ресурсов для повседневной проверки
    После установки Sonar-scanner Скачанный архив мы распакуем также в каталог рядом с SonarQube, и для красоты переименуем его в просто Sonar-scanner.

    Структура каталога sonar-scanner примерно такая же, как у самого sonarqube:
        1. В каталоге bin лежат файлы, которые непосредственно будут запускаться
        2. В папке conf находится файл sonar-scanner.properties – это настройки.

    По умолчанию SonarQube ставится на localhost, но у нас SonarQube крутится на специальном сервере, поэтому мы здесь прописываем свойство sonar.host.url (определенный IP-шник). Больше здесь никаких особых настроек не нужно.

    В файле sonar-scanner.properties вы можете прописать значения по умолчанию для всех анализов.(по умолчанию он ищет Java в переменной среды JAVA_HOME либо в переменной среды PATH, но вы можете это здесь поменять).
    Больше здесь никаких особых настроек не нужно.

    После всего этого мы заходим в какой-нибудь проект, например, у нас есть выгрузка EDT-шного проекта «Conference» – здесь находятся исходники всех наших подсистем, справочников и всего остального.
    Чтобы просканировать проект вручную, надо положить в папку с исходниками батник check.bat и, опционально, еще файл sonar-project.properties.
    У нас получилась примерно следующая строка: 
        sonar-scanner.bat -D"sonar.projectKey=test" -D"sonar.sources=." -D"sonar.host.url=http://10.10.1.150:9000" -D"sonar.login=токен"
    Мы у себя в батнике check.bat, который лежит в корне нашего проекта, оставили только токен и ключ проекта, а остальные параметры вынесли в sonar-project.properties. Чтобы запустить анализ, мы снова запускаем командную строку и вызываем в ней батник.
    Мы получили надпись EXECUTION SUCCESS – значит, все отправлено.Теперь если мы вернемся в SonarQube, у нас порог качества у проекта Conference поменялся на «Пройдено» и обновилась дата последнего анализа.


    Пример команды для батника check.bat вы можете получить из самого SonarQube, когда вы добавляете новый проект на закладке Проекты.

    И в самом запускающем bat-нике (sonar-scanner.bat) можно, например, переопределить местонахождение Java.
    Чтобы работал Sonar-scanner для пользователя, под которым он будет у вас запускаться, нужно обязательно задать токены – для этого здесь есть колонка Токены. Если для пользователя нажать кнопку в этой колонке, можно сгенерировать новый токен. Это мы делали в прошлом пункте.

    Файл для анализа EDT: 'run-analyze.bat'
        git config --local core.quitepath false //Поддержка русских имен файлов.
        set SONAR_SCANNER_OPTS=-XX:+UseG1Gc -XX:MaxGCPauseMillis=200 -Xmx5g //Использовать для больших конфигураций (-XX:MaxGCPauseMillis=200 //Сборщик мусора активируется каждые 200 млсек. Активируется параллельно)
        sonar-scanner.bat -Dsonar.host.url=https://localhost:9000 -Dsonar.login=<Параметр доступа> //Вид параметра доступа: '38dd79b4d0faf7bb85ff2a57c04bc490c730cd27'
        -Dsonar.branch=lustin-dev //Анализ только локальный. Создает отдельный локальный проект (<Название проекта> lustin-dev)

        'sonar-project.properties': //Файл с настройками проекта
            //Последовательное определение модулей
            sonar.modules=conf,ext1,ext2,ext3,<Название папки модуля> //Определение нескольких модулей

            //Подмодули (расширения)
            conf.sonar.sources=.
            conf.sonar.projectBaseDir=src//cf
            conf.sonar.projectName=1c Conf

            ext1.sonar.sources=.
            ext1.sonar.projectBaseDir=src//ext//Extension1
            ext1.sonar.projectName=Extension 1

            ext2.sonar.sources=.
            ext2.sonar.projectBaseDir=src//ext//Extension2
            ext2.sonar.projectName=Extension 2

            ext3.sonar.sources=.
            ext3.sonar.projectBaseDir=src//ext//Extension3
            ext3.sonar.projectName=Extension 3

        Этот локальный анализ требуется для проверки кода до того, когда поделятся им.


3. Настройка окружения разработчика применительно к EDT или 1С:Конфигуратору
    Добавляет:
            Информацию о неиспользуемых или несуществующие переменные.

        Настройка: 
            При анализе: 
                Файл для анализа EDT: 'run-analyze.bat'
            git config --local core.quitepath false //Поддержка русских имен файлов.
            set SONAR_SCANNER_OPTS=-XX:+UseG1Gc -XX:MaxGCPauseMillis=200 -Xmx5g //Использовать для больших конфигураций (-XX:MaxGCPauseMillis=200 //Сборщик мусора активируется каждые 200 млсек. Активируется параллельно)
            sonar-scanner.bat -Dsonar.host.url=https://localhost:9000 -Dsonar.login=<Параметр доступа> //Вид параметра доступа: '38dd79b4d0faf7bb85ff2a57c04bc490c730cd27'
            -Dsonar.branch=lustin-dev //Анализ только локальный. Создает отдельный локальный проект (<Название проекта> lustin-dev)

            'sonar-project.properties': //Файл с настройками проекта
                //Последовательное определение модулей
                sonar.modules=conf,ext1,ext2,ext3,<Название папки модуля> //Определение нескольких модулей

                //Подмодули (расширения)
                conf.sonar.sources=.
                conf.sonar.projectBaseDir=src//cf
                conf.sonar.projectName=1c Conf

                ext1.sonar.sources=.
                ext1.sonar.projectBaseDir=src//ext//Extension1
                ext1.sonar.projectName=Extension 1

                ext2.sonar.sources=.
                ext2.sonar.projectBaseDir=src//ext//Extension2
                ext2.sonar.projectName=Extension 2

                ext3.sonar.sources=.
                ext3.sonar.projectBaseDir=src//ext//Extension3
                ext3.sonar.projectName=Extension 3

            Этот локальный анализ требуется для проверки кода до того, когда поделятся им.

            Для просмотра замечаний по коду до его коммита, требуется установить расширение EDT:
                Ссылка: 'https://github.com/DoublesunRUS/ru.capralow.dt.bslls.validator'
            Плагины ставятся через пункт меню 'Справка' -> 'Установить новое ПО'.
            Далее выбираем адрес: 'http://capralow.ru/edt/bslls.validator/latest/' и устанавливаем плагин.
            Теперь слева от кода, можно увидеть замечания, которые могли бы быть написаны от SonarQube.

        Особенности:
            Плохо работает с русскими именами файлов.


4. Поиск наиболее критичных замечаний, работа с метриками качества, отборы по наиболее критичным объектам
    Пороги качества:
            Дальше – после того как вы настроили пользователей и сделали токены, нам нужно немного кастомизировать SonarQube под себя.
            Для этого можно использовать так называемые «пороги качества» – это те критерии, по которым мы определяем, что текущую сборку можно выпускать.
            По умолчанию в SonarQube есть порог качества Sonar way.
            Вы здесь можете создать свой порог качества – мы свой порог назвали Infostart way.
            У нас сборочная линия настроена так, что если текущая сборка порог качества не проходит, то она валится с ошибкой – говорит, что пока не исправите, никакого релиза не будет.
            Здесь можно добавлять различные метрики.
            Их очень много, можно очень сильно кастомизировать.
            Мы для демонстрации пока добавили, что если нет новых блокирующих замечаний, значит, все хорошо, и можно выпускать.
            Пороги качества можно ставить как в целом, допустим, по всему SonarQube, так и прописывать отдельно по проектам.
            Я сейчас поставил по умолчанию, чтобы ко всем новым проектам, которые будут попадать в SonarQube, сразу применялся этот порог качества.
        Профили качества:
            После того как мы настроили пороги качества, посмотрим, какие возможности есть у профилей качества.
            Когда мы устанавливаем 1C (BSL) Community Plugin, у нас автоматически появляется профиль для языка 1С (BSL).
            Он встроенный.
            В нем сейчас есть 114 правил.
            Мы можем в них провалиться по гиперссылке.
            Можно посмотреть, что каждое правило в себе содержит – какая у него критичность, какие пороговые значения.
            Но этот профиль качества – это как конфигурация на поддержке, мы его изменять не можем.
            Чтобы его изменить, его нужно скопировать.
        Настройка правил:
            В профиле Фильтр у нас уже появляется возможность отредактировать правила.
            Мы можем выбрать гиперссылку в таблице правил и детализировать активные правила, например.
            Очень важный момент – здесь есть гибкая система фильтров, можно фильтровать по чему угодно.
            Например, сейчас в профиле Infostart rules отобраны только активные правила этого профиля.
            Допустим, мы здесь можем отредактировать какое-нибудь правило.
            Например, есть правило «Ограничение на длину строки», которое заключается в том, что строка не должна превышать 120 символов.
            Это незначительная ошибка, но SonarQube считает, что это ошибка.
            А мы говорим, что у нас широкие мониторы, нам 120 символов мало, мы хотим видеть 500 символов.
            Соответственно, теперь мы поменяли пороговое значение, при котором срабатывает это правило, как ошибочное.
            Кроме этого, мы можем поменять серьезность этого правила – указать, что оно у нас блокирующее.
            Длинные строки выше 500 символов мы в своей конфигурации видеть не хотим.
            Тут все достаточно просто настраивается.
            Мы всегда можем вернуть родительские настройки по соответствующей кнопке (у нас здесь указан родитель этого правила).
            Кроме этого, тут есть неактивные правила.
            Это те, которые по умолчанию выключены.
            Но если мы, допустим, хотим, чтобы у нас было запрещено использование тернарного оператора, мы можем это правило активировать, и тогда оно тоже будет срабатывать в нашем коде.
            Понятно, что неактивные правила при проверке не отрабатывают, а активные – отрабатывают.
            Единственное, что когда у нас наследуется профиль качества от родителя, мы не можем сделать неактивным правилом то, которое было активным у родителя.
            Поэтому если мы точно не хотим какое-то правило использовать, мы можем отвязать профиль от родителя.
            Тогда все правила автоматически станут неактивными, и мы можем выборочно что-то активировать, отредактировать их как хотим – под себя настроить.
            Это – что касается самих настроек.
            Мы установили порог качества, профиль качества, пробежались по каким-то правилам.
            Это все можно было сделать и позже.
5. Исправление найденных замечаний, работа со статусами и правилами замечаний

6. Рефакторинг запутанного кода (цикломатическая сложность)

7. Рефакторинг дублирования кода в конфигурации 1С

8. Особенности использования при разработке расширений 1С
